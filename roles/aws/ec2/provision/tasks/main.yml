---

- name: Merge EC2 configuration
  set_fact:
    ec2: "{{ ec2_default | combine(ec2 | d({}), recursive=True) }}"

- name: Show EC2 configuration to be applied
  debug:
    var: ec2

- name: Show tags for target instances
  debug:
    var: ec2.tags

- name: Confirm before proceeding
  pause:
    prompt: Check the tags above and then press Ctrl-C to proceed.
  when: "not {{ skip_confirm | d(false) }}"

- name: Provision EC2 instances
  ec2:
    assign_public_ip: "{{ ec2.assign_public_ip }}"
    count_tag: "{{ ec2.tags }}"
    exact_count: "{{ ec2.exact_count }}"
    group: "{{ ec2.group }}"
    image: "{{ ec2.image }}"
    instance_profile_name: "{{ ec2.instance_profile_name }}"
    instance_tags: "{{ ec2.tags }}"
    instance_type: "{{ ec2.instance_type }}"
    key_name: "{{ ec2.key_name }}"
    region: "{{ ec2.region }}"
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    volumes:
      - device_name: "{{ ec2.volumes[0].device_name }}"
        volume_type: "{{ ec2.volumes[0].volume_type }}"
        volume_size: "{{ ec2.volumes[0].volume_size }}"
        delete_on_termination: "{{ ec2.volumes[0].delete_on_termination }}"
    wait: "{{ ec2.wait }}"
  register: ec2_hosts

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    timeout: 320
    state: started
  with_items: "{{ ec2_hosts.tagged_instances }}"

- name: Add instances to EC2 host group
  add_host:
    name: "{{ item.public_dns_name }}"
    groups: ec2_host_group
  with_items: "{{ ec2_hosts.tagged_instances }}"
